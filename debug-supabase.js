// Script de diagnostic Supabase
// Ex√©cuter avec: node debug-supabase.js

console.log('üîç DIAGNOSTIC SUPABASE - Global Star Distribution');
console.log('==================================================');

// V√©rifier les variables d'environnement
const fs = require('fs');
const path = require('path');

// Lire le fichier .env.local s'il existe
const envPath = path.join(__dirname, '.env.local');
let envContent = '';

try {
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
    console.log('‚úÖ Fichier .env.local trouv√©');
  } else {
    console.log('‚ùå Fichier .env.local non trouv√©');
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture de .env.local:', error.message);
}

// Analyser le contenu
const lines = envContent.split('\n');
let supabaseUrl = '';
let supabaseKey = '';
let vapidKey = '';

lines.forEach(line => {
  if (line.startsWith('VITE_SUPABASE_URL=')) {
    supabaseUrl = line.split('=')[1];
  }
  if (line.startsWith('VITE_SUPABASE_ANON_KEY=')) {
    supabaseKey = line.split('=')[1];
  }
  if (line.startsWith('VITE_VAPID_PUBLIC_KEY=')) {
    vapidKey = line.split('=')[1];
  }
});

console.log('\nüìã Configuration d√©tect√©e:');
console.log('  VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ Configur√©' : '‚ùå Non configur√©');
console.log('  VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ Configur√©' : '‚ùå Non configur√©');
console.log('  VITE_VAPID_PUBLIC_KEY:', vapidKey ? '‚úÖ Configur√©' : '‚ùå Non configur√©');

// V√©rifier les valeurs par d√©faut
const isDefaultUrl = supabaseUrl === 'https://your-project.supabase.co' || !supabaseUrl;
const isDefaultKey = supabaseKey === 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.your-anon-key-here' || !supabaseKey;

console.log('\nüîß Validation:');
console.log('  URL par d√©faut:', isDefaultUrl ? '‚ùå Oui (√† changer)' : '‚úÖ Personnalis√©e');
console.log('  Cl√© par d√©faut:', isDefaultKey ? '‚ùå Oui (√† changer)' : '‚úÖ Personnalis√©e');

// V√©rifier la configuration compl√®te
const isConfigured = supabaseUrl && supabaseKey && !isDefaultUrl && !isDefaultKey;

console.log('\nüéØ R√©sultat:');
if (isConfigured) {
  console.log('‚úÖ Configuration Supabase valide');
  console.log('üöÄ L\'application devrait fonctionner en mode en ligne');
} else {
  console.log('‚ùå Configuration Supabase invalide');
  console.log('üì± L\'application fonctionnera en mode hors ligne');
  
  console.log('\nüí° Actions requises:');
  if (!supabaseUrl || isDefaultUrl) {
    console.log('1. Configurez VITE_SUPABASE_URL avec votre vraie URL Supabase');
  }
  if (!supabaseKey || isDefaultKey) {
    console.log('2. Configurez VITE_SUPABASE_ANON_KEY avec votre vraie cl√© anonyme');
  }
}

console.log('\nüìù Prochaines √©tapes:');
if (isConfigured) {
  console.log('1. V√©rifiez que les tables sont cr√©√©es dans Supabase');
  console.log('2. Testez la connexion avec le composant SupabaseTest');
  console.log('3. Configurez l\'utilisateur admin');
} else {
  console.log('1. Cr√©ez un projet sur https://supabase.com');
  console.log('2. R√©cup√©rez vos cl√©s dans Settings > API');
  console.log('3. Mettez √† jour le fichier .env.local');
  console.log('4. Ex√©cutez les scripts SQL fournis');
}

console.log('\nüîó Liens utiles:');
console.log('- Supabase Dashboard: https://supabase.com/dashboard');
console.log('- Documentation: https://supabase.com/docs');
console.log('- Guide de configuration: GUIDE_CONFIGURATION_COMPLET.md');

console.log('\nüìä Fichiers de configuration:');
const configFiles = [
  'supabase-schema.sql',
  'supabase-rls.sql', 
  'supabase-init-data.sql',
  'supabase-admin-setup.sql'
];

configFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  const exists = fs.existsSync(filePath);
  console.log(`  ${file}: ${exists ? '‚úÖ Trouv√©' : '‚ùå Manquant'}`);
});

console.log('\n‚ú® Diagnostic termin√© !');
